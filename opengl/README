android_raspberrypi_userland_hackfest
=====================================

What I Should Of Done The First Time Round


This repo is an intermediate to compiling the RaspberryPI Userland for Android

We only really need the libkhrn_static and it's supporting libraries.
libvchiq_arm, libvcos, libbcm_host and libvchostif.

As this really is the only thing accessing the aforementioned libraries, 
it seem prudent to just compile everything in to one "fat" static library.

We then use the Android Build System to transform the static library into a useable shared library.


Changes
=======

check interface/khronos/CMakeLists.txt for the changes. 

Changes have been made to makefiles/cmake/toolchains/arm-linux-gnueabihf.cmake.
CFlags have been adjusted to compile with a soft-float abi.

Adding -DANDROID to the main CMakeLists.txt is all that is really required to "turn on" the Android features. 
There is absolutely no need for the insanity that is on the master branch in this Repo 
.... we'll chalk that one up to experience :)

DEGL_EGLEXT_ANDROID_STRUCT_HEADER "tells" the build to use the ANativeWindow instead of the older android_native_window_t

buildme now only compiles the khrn_static .

Android Changes
===============

Added the EGL_FRAMEBUFFER_TARGET_ANDROID egl config attribute as required by hwcomposer v1.1 implementations.

Modified the ./interface/khronos/common/linux/khrn_client_platform_linux.c to tie ANativeWindow to a "backend" EGL_DISPMANX_WINDOW_T. 
This is achieved using the CLIENT_THREAD_STATE_T and CLIENT_PROCESS_STATE_T structures which maintain the internal state of library within the context of the running process.

The egl Calls will still accept and EGL_DISPMANX_WINDOW_T or an ANativeWindow when an EGLNativeWindowType argument is required. 
You should be able to pass an unitialized EGL_DISPMANX_WINDOW_T also

BUGS 'n' Stuff 
==============
For some reason you cannot create an GLESv1.1 eglcontext. GLESv2 is used reqardless of the setting. 
See eglCreateContext in interface/khronos/egl/egl_client.c 
This is the case on both a simple test case aswell as in the context of Android's Graphics stack implementation

Logging, Debugging and the Fun Stuff
====================================
change the parameters passed to vcos_log_set_level and/or VCOS_LOG_INIT to adjust the logcat log level.


Hacking, Building and Linking
=============================

run ./buildme as normal. 
From with the context of the Android build system you can use the Android.mk in the root of this repositiory.
The buildme script can probably be added as a phony target to integrate cmake into the Android Build System 
.... I will leave that as an exercise for the reader :) 


TODO
====
Work is no doubt required to make this fully Android Compatible.
More often than not code just simply doesn't exist and needs to be implemented.

